{"version":3,"sources":["Form.js","ListItem.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","name","setToDoName","description","setToDoDesc","type","value","onChange","e","target","onClick","onSubmit","disabled","trim","ListItem","isEdit","setIsEdit","taskEdit","setTaskEdit","nameEditer","id","saveTask","List","list","map","el","key","_id","task","onTaskStatusChange","done","taskRemove","App","setList","getAllToDos","axios","url","method","then","res","console","log","data","catch","useEffect","form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uOAqBeA,MAlBf,SAAcC,GAAQ,IAAD,EACWC,mBAAS,IADpB,mBACVC,EADU,KACJC,EADI,OAEkBF,mBAAS,IAF3B,mBAEVG,EAFU,KAEGC,EAFH,KASjB,OACI,6BACI,2BAAOC,KAAK,OAAOC,MAAOL,EAAMM,SAAU,SAAAC,GAAC,OAAIN,EAAYM,EAAEC,OAAOH,UACpE,2BAAOD,KAAK,OAAOC,MAAOH,EAAaI,SAAU,SAAAC,GAAC,OAAIJ,EAAYI,EAAEC,OAAOH,UAC3E,4BAAQI,QATC,WACbX,EAAMY,SAAS,CAACV,OAAME,gBACtBD,EAAY,IACZE,EAAY,KAMmBQ,SAA0B,KAAhBX,EAAKY,QAAwC,KAAvBV,EAAYU,QAAvE,c,OC6BGC,MA1Cf,SAAkBf,GAAQ,IAAD,EAEOC,oBAAS,GAFhB,mBAEde,EAFc,KAENC,EAFM,OAGWhB,mBAAS,IAHpB,mBAGdiB,EAHc,KAGJC,EAHI,KAKfC,EAAa,SAACC,EAAInB,EAAME,GAC1Ba,GAAU,GACVE,EAAY,2BAAID,GAAL,IAAcG,GAAIA,EAAInB,KAAMA,EAAME,YAAaA,MAiB9D,OACI,8BACKY,EACK,oCACE,2BAAOV,KAAK,OAAOC,MAAOW,EAAShB,KAAMM,SAlBhC,SAACC,GACtBU,EAAY,2BAAID,GAAL,IAAehB,KAAMO,EAAEC,OAAOH,YAkB7B,2BAAOD,KAAK,OAAOC,MAAOW,EAASd,YAAaI,SAfhC,SAACC,GAC7BU,EAAY,2BAAID,GAAL,IAAed,YAAaK,EAAEC,OAAOH,YAepC,4BAAQI,QAZP,WACbX,EAAMsB,SAASJ,EAASG,GAAIH,EAAShB,KAAMgB,EAASd,aACpDe,EAAY,MAUA,SAEH,oCACD,0BAAMR,QAAS,kBAAMS,EAAWpB,EAAMqB,GAAIrB,EAAME,KAAMF,EAAMI,eAAeJ,EAAME,KAAjF,OACA,0BAAMS,QAAS,kBAAMS,EAAWpB,EAAMqB,GAAIrB,EAAME,KAAMF,EAAMI,eAAeJ,EAAMI,gBCZlFmB,MAtBf,SAAcvB,GAEV,OACI,4BACKA,EAAMwB,KAAKC,KAAI,SAAAC,GAAE,OACd,wBAAIC,IAAKD,EAAGE,KACR,kBAAC,EAAD,CAAU1B,KAAMwB,EAAGxB,KACTmB,GAAIK,EAAGE,IACPxB,YAAasB,EAAGtB,YAChByB,KAAMH,EACNJ,SAAUtB,EAAMsB,WAE1B,4BAAQX,QAAS,kBAAMX,EAAM8B,mBAAmBJ,EAAGE,IAAKF,EAAGK,QAEnDL,EAAGK,KAAO,OAAS,cAE3B,4BAAQpB,QAAS,kBAAMX,EAAMgC,WAAWN,EAAGE,OAA3C,WC0ELK,MAxFf,WAAgB,IAAD,EAEahC,mBAAS,IAFtB,mBAEJuB,EAFI,KAEEU,EAFF,KAKLC,EAAc,WAChBC,IAAM,CACFC,IAAK,6BACLC,OAAQ,QAEPC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZN,EAAQM,EAAIG,SAEfC,OAAM,SAAAnC,GAAC,OAAIgC,QAAQC,IAAIjC,OA8DhC,OA3DAoC,qBAAU,WACNV,MACD,IA0DC,6BACI,kBAAC,EAAD,CAAMvB,SA9CK,SAACkC,GAChBL,QAAQC,IAAII,GACZV,IAAM,CACFC,IAAK,6BACLC,OAAQ,OACRK,KAAMG,IAELP,MAAK,SAAAC,GACFL,OAEHS,OAAM,SAAAnC,GAAC,OAAIgC,QAAQC,IAAIjC,SAqCxB,kBAAC,EAAD,CAAMe,KAAMA,EACNQ,WA3DK,SAACX,GAChBe,IAAM,CACFC,IAAI,8BAAD,OAAgChB,GACnCiB,OAAQ,WAEPC,MAAK,SAAAC,GACFL,OAEHS,OAAM,SAAAnC,GAAC,OAAIgC,QAAQC,IAAIjC,OAoDlBqB,mBApCa,SAACT,EAAIU,GAC5BU,QAAQC,IAAIX,GACZK,IAAM,CACFC,IAAI,8BAAD,OAAgChB,GACnCiB,OAAQ,MACRK,KAAM,CAACZ,MAAOA,KAEbQ,MAAK,SAAAC,GACFL,OAEHS,OAAM,SAAAnC,GAAC,OAAIgC,QAAQC,IAAIjC,OA2BlBa,SAxBG,SAACD,EAAInB,EAAME,GACxBqC,QAAQC,IAAIrB,GACZoB,QAAQC,IAAIxC,GACZuC,QAAQC,IAAItC,GACZgC,IAAM,CACFC,IAAI,8BAAD,OAAgChB,GACnCiB,OAAQ,QACRK,KAAM,CACFzC,KAAMA,EACNE,YAAaA,KAGhBmC,MAAK,SAAAC,GACFL,OAEHS,OAAM,SAAAnC,GAAC,OAAIgC,QAAQC,IAAIjC,WClEhBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.075d7474.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction Form(props) {\n    const [name, setToDoName] = useState('');\n    const [description, setToDoDesc] = useState('');\n\n    const onSubmit = () => {\n        props.onSubmit({name, description});\n        setToDoName('');\n        setToDoDesc('');\n    }\n    return (\n        <div>\n            <input type=\"text\" value={name} onChange={e => setToDoName(e.target.value)}/>\n            <input type=\"name\" value={description} onChange={e => setToDoDesc(e.target.value)}/>\n            <button onClick={onSubmit} disabled={name.trim() === '' || description.trim() === ''} >Add Task</button>\n        </div>\n    );\n}\n\nexport default Form;\n","import React, {useState} from 'react';\n\n\nfunction ListItem(props) {\n\n    const [isEdit, setIsEdit] = useState(false);\n    const [taskEdit, setTaskEdit] = useState({});\n\n    const nameEditer = (id, name, description) => {\n        setIsEdit(true);\n        setTaskEdit({...taskEdit,id: id, name: name, description: description});\n    }\n\n    const onEditNameChange = (e) => {\n        setTaskEdit({...taskEdit, name: e.target.value})\n    }\n\n    const onEditDescriptionChange = (e) => {\n        setTaskEdit({...taskEdit, description: e.target.value})\n    }\n\n    const saveTask = () => {\n        props.saveTask(taskEdit.id, taskEdit.name, taskEdit.description)\n        setTaskEdit({});\n    }\n\n\n    return (\n        <span>\n            {isEdit\n                ? <>\n                    <input type=\"text\" value={taskEdit.name} onChange={onEditNameChange}/>\n                    <input type=\"text\" value={taskEdit.description} onChange={onEditDescriptionChange}/>\n                    <button onClick={saveTask}>Save</button>\n                </>\n                :<>\n                <span onClick={() => nameEditer(props.id, props.name, props.description)}>{props.name} - </span>\n                <span onClick={() => nameEditer(props.id, props.name, props.description)}>{props.description}</span>\n                </>\n            }\n\n        </span>\n    );\n}\n\nexport default ListItem;\n","import React from 'react';\nimport ListItem from \"./ListItem\";\n\nfunction List(props) {\n\n    return (\n        <ul>\n            {props.list.map(el =>\n                <li key={el._id}>\n                    <ListItem name={el.name}\n                              id={el._id}\n                              description={el.description}\n                              task={el}\n                              saveTask={props.saveTask}/>\n\n                    <button onClick={() => props.onTaskStatusChange(el._id, el.done)}>\n                        {\n                            el.done ? 'Done' : 'To Be Done'\n                        }</button>\n                    <button onClick={() => props.taskRemove(el._id)}>X</button>\n                </li>)}\n        </ul>\n    );\n}\n\nexport default List;\n","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport Form from \"./Form\";\nimport List from \"./List\";\n\nfunction App() {\n\n    const [list, setList] = useState([]);\n    //const [done, setDone] = useState(true);\n\n    const getAllToDos = () => {\n        axios({\n            url: 'http://localhost:5000/todo',\n            method: 'GET'\n        })\n            .then(res => {\n                console.log(res)\n                setList(res.data)\n            })\n            .catch(e => console.log(e))\n    };\n\n    useEffect(() => {\n        getAllToDos();\n    }, []);\n\n    const taskRemove = (id) => {\n        axios({\n            url: `http://localhost:5000/todo/${id}`,\n            method: 'DELETE'\n        })\n            .then(res => {\n                getAllToDos();\n            })\n            .catch(e => console.log(e))\n    };\n\n    const createToDo = (form) => {\n        console.log(form)\n        axios({\n            url: 'http://localhost:5000/todo',\n            method: 'POST',\n            data: form\n        })\n            .then(res => {\n                getAllToDos();\n            })\n            .catch(e => console.log(e))\n    }\n\n    const onTaskStatusChange = (id, done) => {\n        console.log(done)\n        axios({\n            url: `http://localhost:5000/todo/${id}`,\n            method: 'PUT',\n            data: {done: !done}\n        })\n            .then(res => {\n                getAllToDos();\n            })\n            .catch(e => console.log(e))\n    }\n\n    const saveTask = (id, name, description) => {\n        console.log(id)\n        console.log(name)\n        console.log(description)\n        axios({\n            url: `http://localhost:5000/todo/${id}`,\n            method: 'PATCH',\n            data: {\n                name: name,\n                description: description\n            }\n        })\n            .then(res => {\n                getAllToDos();\n            })\n            .catch(e => console.log(e))\n    }\n\n    return (\n        <div>\n            <Form onSubmit={createToDo}/>\n            <List list={list}\n                  taskRemove={taskRemove}\n                  onTaskStatusChange={onTaskStatusChange}\n                  saveTask={saveTask}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}